ques-1
def solve(s):
    return ' '.join(word.capitalize() for word in s.split(' '))

# ðŸ”¸ Sample Input
input_string = "hello world"

# ðŸ”¹ Call the function
output_string = solve(input_string)

# ðŸ”¸ Print Output
print("Input: ", input_string)
print("Output:", output_string)

ques-2
def average(array):
    unique_values = set(array)       # Remove duplicates
    avg = sum(unique_values) / len(unique_values)  # Average
    return avg

# ðŸ”¸ Sample Input
n = 5
arr = [2, 2, 3, 4, 5]

# ðŸ”¹ Call the function
result = average(arr)

# ðŸ”¸ Print Output
print("Input list: ", arr)
print("Unique values:", set(arr))
print("Average of unique values:", result)

ques-3
import textwrap

def wrap(string, max_width):
    return textwrap.fill(string, max_width)

# ðŸ”¸ Sample Input
input_string = "ABCDEFGHIJKLIMNOQRSTUVWXYZ"
width = 4

# ðŸ”¹ Call the function
wrapped_text = wrap(input_string, width)

# ðŸ”¸ Print Output
print("Wrapped Text:\n" + wrapped_text)

ques-4
def print_rangoli(size):
    import string
    alphabets = string.ascii_lowercase  # 'abcdefghijklmnopqrstuvwxyz'
    lines = []

    for i in range(size):
        left = alphabets[size-1:i:-1]   # descending part
        right = alphabets[i:size]       # ascending part
        row = '-'.join(left + right)    # join both parts with '-'
        lines.append(row.center(4*size-3, '-'))  # center align with dashes

    full_pattern = lines[::-1] + lines[1:]
    print('\n'.join(full_pattern))


# ðŸ”¸ Sample Input
n = 3

# ðŸ”¹ Function Call
print("Alphabet Rangoli of size", n)
print_rangoli(n)

ques-5
def merge_the_tools(string, k):
    for i in range(0, len(string), k):
        part = string[i:i+k]
        result = ''
        for ch in part:
            if ch not in result:
                result += ch
        print(result)

# ðŸ”¸ Sample Input
s = "AABCAAADA"
k = 3

# ðŸ”¹ Function Call
print("Final Output:")
merge_the_tools(s, k)

ques-6
from collections import Counter

# ðŸ”¸ Input
X = int(input())  # number of shoes
shoe_sizes = list(map(int, input().split()))
N = int(input())  # number of customers

# ðŸ”¹ Create counter for available shoe sizes
shoe_inventory = Counter(shoe_sizes)

# ðŸ”¸ Process customers
total_earned = 0
for _ in range(N):
    size, price = map(int, input().split())
    if shoe_inventory[size] > 0:
        total_earned += price
        shoe_inventory[size] -= 1  # reduce count of that size

# ðŸ”¹ Output
print(total_earned)

ques-7
# ðŸ”¸ Number of test cases
T = int(input())

for _ in range(T):
    try:
        a, b = input().split()
        result = int(a) // int(b)
        print(result)
    except Exception as e:
        print("Error Code:", e)

ques-8
import re

# ðŸ”¸ Number of test cases
T = int(input())

for _ in range(T):
    pattern = input()
    try:
        re.compile(pattern)  # Try to compile the regex
        print(True)
    except re.error:
        print(False)

ques-9
n = int(input())  # Number of elements in the set
s = set(map(int, input().split()))  # The initial set

N = int(input())  # Number of operations

for _ in range(N):
    command = input().split()
    if command[0] == "pop":
        s.pop()
    elif command[0] == "remove":
        s.remove(int(command[1]))
    elif command[0] == "discard":
        s.discard(int(command[1]))

print(sum(s))  # Print the sum of elements left in the set


question-1(assignment-1)
def print_formatted(number):
    # Get the width of the binary representation of the number
    width = len(bin(number)[2:])
    
    # Loop from 1 to the number
    for i in range(1, number + 1):
        # Convert to decimal, octal, hexadecimal, and binary
        dec = str(i).rjust(width)
        octal = oct(i)[2:].rjust(width)
        hexa = hex(i)[2:].upper().rjust(width)
        binary = bin(i)[2:].rjust(width)
        
        # Print them in one line
        print(f"{dec} {octal} {hexa} {binary}")



question-2(assignment-1)
# This line checks if the script is being run directly
if __name__ == '__main__':
    
    # Read first number from user input
    a = int(input())
    
    # Read second number from user input
    b = int(input())
    
    # Print the sum of a and b
    print(a + b)
    
    # Print the difference (a - b)
    print(a - b)
    
    # Print the product (a * b)
    print(a * b)



question-3(assignment-1)
from itertools import groupby

s = input()  # Read input

for key, group in groupby(s):
    count = len(list(group))  # Count how many times the character repeats
    print((count, int(key)), end=' ')  # Print the tuple



question-4(assignment-1)
def minion_game(string):
    vowels = "AEIOU"
    kevin_score = 0
    stuart_score = 0
    length = len(string)

    for i in range(length):
        if string[i] in vowels:
            kevin_score += length - i
        else:
            stuart_score += length - i

    if kevin_score > stuart_score:
        print("Kevin", kevin_score)
    elif kevin_score < stuart_score:
        print("Stuart", stuart_score)
    else:
        print("Draw")

# Main block to run the function
if __name__ == '__main__':
    s = input().strip()
    minion_game(s)


question-5(assignment-1)
def is_leap(year):
    # Check if year is divisible by 400
    if year % 400 == 0:
        return True
    # Check if year is divisible by 100 (but not 400)
    if year % 100 == 0:
        return False
    # Check if year is divisible by 4 (but not 100)
    if year % 4 == 0:
        return True
    # Otherwise, not a leap year
    return False


if __name__ == '__main__':
    year = int(input())
    print(is_leap(year))



question-7(assignment-1)
from itertools import combinations

def iterables_and_iterators(n, k, arr):
    combos = list(combinations(arr, k))
    count_a = 0
    
    for combo in combos:
        if 'a' in combo:
            count_a += 1
    
    return count_a / len(combos)

if __name__ == '__main__':
    n, k = map(int, input().split())
    arr = input().split()
    result = iterables_and_iterators(n, k, arr)
    print(result)


question-8(assignment-1)
if __name__ == '__main__':
    n = int(input())          # Number of elements (not directly needed here)
    integer_list = map(int, input().split())  # Read the integers
    
    # Create a tuple from the input list
    t = tuple(integer_list)
    
    # Print the hash of the tuple
    print(hash(t))


question-9(assignment-1)
if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    
    for _ in range(n):
        line = input().split()
        name = line[0]
        scores = list(map(float, line[1:]))
        student_marks[name] = scores
        
    query_name = input()
    marks = student_marks[query_name]
    average = sum(marks) / len(marks)
    
    print(f"{average:.2f}")


question-10(assignment-1)
def print_formatted(number):
    width = len(bin(number)) - 2  # length of binary representation without '0b'
    for i in range(1, number + 1):
        # decimal, octal, hex (uppercase), binary
        print(f"{i:>{width}d} {oct(i)[2:]:>{width}} {hex(i)[2:].upper():>{width}} {bin(i)[2:]:>{width}}")

if __name__ == '__main__':
    n = int(input())
    print_formatted(n)

